Description: AWS EC2 Apache webserver (fdp-1p4dlgcpe)
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Linux Instance Configuration
        Parameters:
          - LinuxInstanceType
          - LatestAmiId
    ParameterLabels:
      LinuxInstanceType:
        default: Linux Instance Type
      LatestAmiId:
        default: SSM key to the latest Amazon linux AMI
Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.micro
      - t2.medium
      - t3.micro
      - t3.medium
      - t3.large
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and HTTPS access
      VpcId: !ImportValue 'Network-VPC'
      SecurityGroupIngress:
        - Description: allow incoming HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 172.29.10.0/24
        - Description: allow incoming HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 172.29.10.0/24
        - Description: allow icmp
          IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 172.29.10.0/24
      SecurityGroupEgress:
        - Description: allow outgoing HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: allow outgoing HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureSampleApp
        ConfigureSampleApp:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join 
                - |+

                - - >-
                    <h1>Congratulations, you have successfully launched the
                    Apache webserver demo.</h1>
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 13
            VolumeType: gp2
            Encrypted: 'true'
      SubnetId: !ImportValue 'Network-PublicSubnet1A'
      IamInstanceProfile: !Ref PatchingInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub 'EC2-Apache-${AWS::StackName}'
      SecurityGroupIds:
        - !GetAtt 
          - WebSecurityGroup
          - GroupId
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --configsets All '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

  EC2Volume:
    Type: AWS::EC2::Volume
    DependsOn: WebServerInstance
    Properties:
      AvailabilityZone: !GetAtt WebServerInstance.AvailabilityZone
      Encrypted: true
      Size: 12
      VolumeType: gp2
  EC2VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    DependsOn: EC2Volume
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref WebServerInstance
      VolumeId: !Ref EC2Volume


###############################################################################

  InstancePatchingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  PatchingInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstancePatchingRole

  LinuxPatchBaseline:
    Type: 'AWS::SSM::PatchBaseline'
    Properties:
      OperatingSystem: AMAZON_LINUX
      ApprovalRules:
        PatchRules:
          - ApproveAfterDays: 0
            ComplianceLevel: CRITICAL
            EnableNonSecurity: true
            PatchFilterGroup:
              PatchFilters:
                - Key: PRODUCT
                  Values:
                    - '*'
                - Key: CLASSIFICATION
                  Values:
                    - Security
                    - Bugfix
                    - Enhancement
                    - Recommended
                - Key: SEVERITY
                  Values:
                    - Critical
                    - Important
                    - Medium
                    - Low
      Description: >-
        Service Catalog EC2 Reference Architecture Patch Baseline for Amazon
        Linux instace
      Name: sc-ec2-ra-linux-patch-baseline
  MaintenanceWindowRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  MaintenanceWindow:
    Type: 'AWS::SSM::MaintenanceWindow'
    Properties:
      Description: Maintenance window to allow for patching Amazon Linux instances
      AllowUnassociatedTargets: false
      Cutoff: 2
      Schedule: cron(* 17 * * ? *)
      Duration: 6
      Name: sc-ec2-ra-linux-maintenance-window
  LinuxMainteanceWindowTarget:
    Type: 'AWS::SSM::MaintenanceWindowTarget'
    Properties:
      OwnerInformation: Service Catalog EC2 Reference Architecture
      Description: >-
        Service Catalog EC2 Reference Architecture - Patch Maintenance for
        Amazon Linux Instances
      WindowId: !Ref MaintenanceWindow
      ResourceType: INSTANCE
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref WebServerInstance
      Name: sc-ec2-ra-linux-patch-targets
  LinuxMaintenanceWindowTaskScan:
    Type: 'AWS::SSM::MaintenanceWindowTask'
    Properties:
      MaxErrors: 1
      Description: >-
        Service Catalog EC2 Reference Architecture Maintenance Window Task: Scan
        for update for Amazon Linux Instance
      ServiceRoleArn: !GetAtt 
        - MaintenanceWindowRole
        - Arn
      Priority: 1
      MaxConcurrency: 1
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref WebServerInstance
      Name: patch-sc-ec2-ra-linux-nginx-instances
      TaskArn: AWS-RunPatchBaseline
      WindowId: !Ref MaintenanceWindow
      TaskParameters:
        Operation:
          Values:
            - Scan
      TaskType: RUN_COMMAND
  LinuxMaintenanceWindowTaskInstall:
    Type: 'AWS::SSM::MaintenanceWindowTask'
    Properties:
      MaxErrors: 1
      Description: >-
        Service Catalog EC2 RA Maintenance Window Task: Install update for
        Amazon Linux Instance
      ServiceRoleArn: !GetAtt 
        - MaintenanceWindowRole
        - Arn
      Priority: 2
      MaxConcurrency: 1
      Targets:
        - Key: InstanceIds
          Values:
            - !Ref WebServerInstance
      Name: patch-sc-ec2-ra-linux-nginx-instances
      TaskArn: AWS-RunPatchBaseline
      WindowId: !Ref MaintenanceWindow
      TaskParameters:
        Operation:
          Values:
            - Install
      TaskType: RUN_COMMAND

  CreateApplication:
    Type: AWS::ServiceCatalogAppRegistry::Application
    Properties: 
      Description: !Sub 'Application for !Sub ${AWS::StackName}'
      Name: !Sub 'AppReg-${AWS::StackName}'
      Tags: 
        Department : 'Innovation Labs'
        CostCenter : '1234'
        Team : 'research'
  CreateAttributeGroupOne:
    Type: AWS::ServiceCatalogAppRegistry::AttributeGroup
    Properties: 
      Attributes: 
        ApplicationResilience: 'high'
        DataSecurity: 'high'
        DataSensitivity: 'high'
      Description: !Sub 'AppReg-Attrib-${AWS::StackName}'
      Name: !Sub 'AppReg-Attrib-${AWS::StackName}'

  AssociateAttributeGroupOne:
    Type: AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation
    Properties: 
      Application: !GetAtt 'CreateApplication.Id'
      AttributeGroup: !GetAtt 'CreateAttributeGroupOne.Id'

  AssociateResourceProd1:
    Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
    Properties: 
      Application: !GetAtt 'CreateApplication.Id'
      Resource: !Sub ${AWS::StackName}
      ResourceType: "CFN_STACK"

Outputs:
  WebsiteURL:
    Description: DNS root URL of the new webserver
    Value: !Sub 
      - 'http://${dns}'
      - dns: !GetAtt 
          - WebServerInstance
          - PublicDnsName
  WebsiteIP:
    Description: IP root URL of the new webserver
    Value: !Sub 
      - 'http://${dns}'
      - dns: !GetAtt 
          - WebServerInstance
          - PublicIp
